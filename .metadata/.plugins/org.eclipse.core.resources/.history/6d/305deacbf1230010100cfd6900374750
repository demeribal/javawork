package com.kiosk.login.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.kiosk.login.DTO.LoginDTO;
import com.kiosk.login.entity.User;
import com.kiosk.login.service.LoginService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
	@RestController
	@RequestMapping("/api/user")
	public class LoginController {
		
		@Autowired
		LoginService loginService;
	    
		@PostMapping("/login")
		public ResponseEntity<?> login(@RequestBody LoginDTO loginDTO, HttpServletRequest request) {
		    System.out.println("로그인 요청 들어옴!"); // 디버깅용 추후에 삭제
		    System.out.println("입력값: " + loginDTO); // 디버깅용 추후에 삭제

		    String username = loginDTO.getUsername();
		    String encodedPassword = loginDTO.getPassword();

		    // Base64 디코딩
		    byte[] decodedBytes = Base64.getDecoder().decode(encodedPassword);
		    String decodedPassword = new String(decodedBytes); // 평문 비밀번호
		    System.out.println("Encoded password: " + encodedPassword);
		    System.out.println("Decoded password: " + decodedPassword);

		    User user = loginService.findByUsername(username);

		    if (user != null) {
		        // 패스워드 검증 (BCryptPasswordEncoder 사용)
		        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
		        boolean passwordMatch = encoder.matches(decodedPassword, user.getPassword());
		        
		        System.out.println("DB 비밀번호 해시: " + user.getPassword());
		        System.out.println("입력된 평문 비밀번호: " + decodedPassword);
		        System.out.println("패스워드 일치 여부: " + passwordMatch);

		        if (passwordMatch) {
		            HttpSession session = request.getSession();
		            session.setAttribute("user", user);               // 전체 user 객체 저장
		            session.setAttribute("userId", user.getId());      // 추가: userId만 따로 저장

		            return ResponseEntity.ok(Map.of(
		                "message", "로그인 성공",
		                "isHead", user.isHead()
		            ));
		        }
		    }

		    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "로그인 실패"));
		}




		//user api
		@GetMapping("/all")
	    public List<User> getAllUsers() {
	        return loginService.getAllUsers();
	    }
		
		//login user api
		@GetMapping("/info")
		public ResponseEntity<?> getUserInfo(HttpSession session) {
		    Object user = session.getAttribute("user"); 
		    if (user == null) {
		        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 안됨");
		    }
		    return ResponseEntity.ok(user);
		}

	}

	
	//user api
	@GetMapping("/all")
    public List<User> getAllUsers() {
        return loginService.getAllUsers();
    }
	
	//login user api
	@GetMapping("/info")
	public ResponseEntity<?> getUserInfo(HttpSession session) {
	    Object user = session.getAttribute("user"); 
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 안됨");
	    }
	    return ResponseEntity.ok(user);
	}

}