package com.kiosk.login.controller;

import java.util.Base64;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.kiosk.login.DTO.LoginDTO;
import com.kiosk.login.entity.User;
import com.kiosk.login.service.LoginService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/api/user")
public class LoginController {

    @Autowired
    LoginService loginService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginDTO loginDTO, HttpServletRequest request) {
        try {
            // reCAPTCHA 인증
            String recaptchaToken = loginDTO.getRecaptchaToken();
            if (!verifyRecaptcha(recaptchaToken)) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("message", "reCAPTCHA 인증 실패"));
            }

            // 로그인 처리
            String username = loginDTO.getUsername();
            String encodedPassword = loginDTO.getPassword();

            // Base64 디코딩
            byte[] decodedBytes = null;
            String decodedPassword = null;

            // encodedPassword가 null인지 확인
            if (encodedPassword == null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("message", "비밀번호가 제공되지 않았습니다."));
            }

            try {
                decodedBytes = Base64.getDecoder().decode(encodedPassword);
                decodedPassword = new String(decodedBytes); // 평문 비밀번호
            } catch (IllegalArgumentException e) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("message", "비밀번호 인코딩 오류"));
            }

            System.out.println("Encoded password: " + encodedPassword);
            System.out.println("Decoded password: " + decodedPassword);

            // 사용자 정보 조회
            User user = loginService.findByUsername(username);

            if (user != null) {
                BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
                // 비밀번호 검증
                boolean passwordMatch = loginService.checkPassword(decodedPassword, user.getPassword());

                if (passwordMatch) {
                    HttpSession session = request.getSession();
                    session.setAttribute("user", user);               // 전체 user 객체 저장
                    session.setAttribute("userId", user.getId());      // 추가: userId만 따로 저장

                    return ResponseEntity.ok(Map.of(
                        "message", "로그인 성공",
                        "isHead", user.isHead()
                    ));
                }
            }

            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "로그인 실패"));
        } catch (Exception e) {
            e.printStackTrace();  // 서버 로그에 오류 확인
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("message", "서버 오류"));
        }
    }

    private boolean verifyRecaptcha(String token) {
        String secret = "6LegjhwrAAAAAKvCs6RcSUSjeCyk3btxjkek3CIE";  // recaptcha secret key
        String url = "https://www.google.com/recaptcha/api/siteverify";

        RestTemplate restTemplate = new RestTemplate();

        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
        params.add("secret", secret);
        params.add("response", token);

        try {
            // 리캡챠 확인 요청
            Map<String, Object> response = restTemplate.postForObject(url, params, Map.class);

            // "success"가 true이면 인증 성공
            if (response != null && Boolean.TRUE.equals(response.get("success"))) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;  // 인증 실패
    }



	
	//user api
	@GetMapping("/all")
    public List<User> getAllUsers() {
        return loginService.getAllUsers();
    }
	
	//login user api
	@GetMapping("/info")
	public ResponseEntity<?> getUserInfo(HttpSession session) {
	    Object user = session.getAttribute("user"); 
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("로그인 안됨");
	    }
	    return ResponseEntity.ok(user);
	}

}
